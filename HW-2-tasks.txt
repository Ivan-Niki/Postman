1. GET    baseURL/first
// Проверить, что статус-код 200
pm.test("Status is 200", () => {
    pm.response.to.have.status(200);
});



// Проверить, что body ответа является нужной строкой
pm.test("Body is certain string", function() {
    pm.response.to.have.body("This is the first responce from server!ss");
});



// Проверить, что body ответа содержит часть строки
pm.test("Body contains string", function() {
    pm.expect(pm.response.text()).to.include("This is th");
});

==============================================================================
2. POST   baseURL/user_info_3

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", () => {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let respJson = pm.response.json();

console.log(respJson);

// 4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Check name matches to our name-from-request", () => {
    pm.expect(respJson.name).to.eql("Ivan");
});

// 5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Check age", () => {
    pm.expect(Number(respJson.age)).to.eql(35);
})

// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Check salary", () => {
    pm.expect(respJson.salary).to.eql(5200);
});

// 7. Спарсить request.
let reqData = request.data;
console.log(reqData);

// 8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("check name 2", () => {
    pm.expect(respJson.name).to.eql(reqData.name);
});
console.log("1 - req-name ------- " + reqData.name);
console.log(respJson.name);

// 9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("check age 2", () => {
    pm.expect(respJson.age).to.eql(reqData.age);
});

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("check salary 2", () => {
    pm.expect(respJson.salary).to.eql(Number(reqData.salary));
});

console.log(respJson.salary);

// 11. Вывести в консоль параметр family из response.
console.log(respJson.family);

// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test("check u-salary_1.5_year", function() {
    pm.expect(respJson.family.u_salary_1_5_year).to.eql(reqData.salary * 4);
});


============================================================================================

2. GET   baseURL/object_info_3

// 1. Отправить запрос.
// 2. Статус код 200
pm.test("status is 200", () => {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let responseJson = pm.response.json();
console.log(responseJson);

// 4. Спарсить request.
let reqJson = pm.request.url.query.toObject();
console.log(reqJson);
//console.log(pm.request.toJSON().url.query);

// 5. Проверить, что name в ответе равно name в request (name забрать из request.)
pm.test("check name", () => {
    pm.expect(responseJson.name).to.eql(reqJson.name);
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("check age", () => {
    pm.expect(responseJson.age).to.eql(reqJson.age);
});
//console.log(typeof responseJson.age);
//console.log(typeof reqJson.age);

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("check salary", () => {
    pm.expect(responseJson.salary).to.eql(+reqJson.salary);
});

// 8. Вывести в консоль параметр family из response.
console.log(responseJson.family);

// 9. Проверить, что у параметра dog есть параметры name.
pm.test("check dog to have name", () => {
    pm.expect(responseJson.family.pets.dog).to.have.property('name');
});

// 10. Проверить, что у параметра dog есть параметры age.
pm.test("check dog to have age", () => {
    pm.expect(responseJson.family.pets.dog).to.have.property("age");
});

// 11. Проверить, что параметр name имеет значение Luky.
pm.test("check dog-name to be Luky", () => {
    pm.expect(responseJson.family.pets.dog.name).to.eql("Luky");
});

// 12. Проверить, что параметр age имеет значение 4.
pm.test("check dog-age to be 4", () => {
    pm.expect(responseJson.family.pets.dog.age).to.eql(4);
});

