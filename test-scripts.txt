
Postman — это HTTP-клиент для тестирования API. HTTP-клиенты тестируют отправку запросов с клиента на сервер и получение ответа от сервера.

В постмане мы можем использовать вкладку Tests в своих запросах и коллекциях для написания тестов, которые будут выполняться, когда Postman получит ответ от API, которому вы отправили запрос.
Вы можете добавить столько тестов, сколько вам нужно для каждого запроса. 
Когда вы добавляете тесты в Collections, они будут выполняться после каждого запроса внутри нее.

Postman отображает фрагменты кода (snippets) справа от области сценария. 
Вы можете добавить их, чтобы опробовать распространенные сценарии, и настроить их в соответствии с вашими потребностями и деталями запроса / ответа.


---------- Начало работы с тестами ------------
Чтобы попробовать написать тестовый сценарий в первый раз, откройте запрос в приложении Postman и откройте вкладку Tests. Введите следующий код JavaScript:

pm.test("Status code is 200", function () {
  pm.response.to.have.status(200);
});

Этот код использует библиотеку pm для запуска метода test. 
Тесты постмана могут использовать синтаксис BDD библиотеки утверждений Chai, который предоставляет возможности для оптимизации того, насколько удобочитаемы ваши тесты для вас и ваших сотрудников. 
В этом примере код использует цепочки BDD to.have для выражения утверждения.

Этот тест проверяет код ответа, возвращаемый API. Если код ответа 200, тест будет пройден, в противном случае он завершится неудачей.
Нажмите Отправить и проверьте вывод результатов теста в области ответов.

Попробуйте изменить код состояния в коде утверждения и запустить его снова, чтобы увидеть, как результаты теста выглядят по-разному, когда они проходят или не проходят.

Вы можете строить свои тестовые утверждения (выражения) разными способами, в зависимости от того, 
как вы хотите, чтобы выводились результаты.
Следующий код является альтернативным способом достижения того же теста, что и выше, с использованием ожидаемого синтаксиса:

pm.test("Status code is 200", () => {
  pm.expect(pm.response.code).to.eql(200);
});





------------ Использование нескольких утверждений ------------
Ваши тесты могут включать несколько утверждений как часть одного теста, вы можете использовать это для группировки связанных утверждений.

pm.test("The response has all properties", () => {
    // разобрать json ответ и проверить три свойства
    const responseJson = pm.response.json();
    pm.expect(responseJson.type).to.eql('vip');
    pm.expect(responseJson.name).to.be.a('string');
    pm.expect(responseJson.id).to.have.lengthOf(1);
});

Если какое-либо из содержащихся утверждений завершится неудачно, тест в целом завершится неудачно. Все утверждения должны быть успешными, чтобы тест прошел успешно.


Either pm.response.json() for JSON or pm.response.text() if you need just the raw plain text.

expect('foo').to.be.a('string');
expect({a: 1}).to.be.an('object');
expect(null).to.be.a('null');
expect(undefined).to.be.an('undefined');
expect(new Error).to.be.an('error');
expect(Promise.resolve()).to.be.a('promise');
expect(new Float32Array).to.be.a('float32array');
expect(Symbol()).to.be.a('symbol');


============== Парсинг (анализ) данных тела ответа ==============
Чтобы выполнить тестовые утверждения на ваши ответы, сначала вам нужно будет разобрать данные в объект JavaScript, который ваши утверждения могут использовать.

Для анализа (парсинга) данных JSON используйте следующий синтаксис:
--> const responseJson = pm.response.json();

Для разбора XML используйте следующий синтаксис:
--> const responseJson = xml2Json(pm.response.text());

Для разбора CSV используйте утилиту CSV-разбора (csv-parse/lib/sync):
const parse = require('csv-parse/lib/sync');
const responseJson = parse(pm.response.text());

Для разбора HTML используйте cheerio:
const $ = cheerio.load(pm.response.text());
//output the html for testing
console.log($.html());


--------- Как обрабатывать ответы, которые не разбираются ----------
Если вы не можете разобрать тело ответа на JavaScript, потому что он не отформатирован как JSON, XML, HTML, CSV
или любой другой доступный формат данных, вы все еще можете делать тестовые утверждения по данным.

Например, мы можем проверить, содержит ли тело ответа строку:
	pm.test("Body contains string",() => {
	  pm.expect(pm.response.text()).to.include("customer_id");
	});

Данное тестовое утверждение не покажет вам, где строка была встречена, потому что оно проводит тест на всем теле ответа.

Также, к примеру, мы можем проверить, соответствует ли ответ строке:
	pm.test("Body is string", function () {
	  pm.response.to.have.body("whole-body-text");
	});


------------ Проверка тела ответа ------------
Мы можем проверить конкретные значения в теле ответа:

/* Ответ имеет следующую структуру:
{
  "name": "Jane",
  "age": 23
},
*/
pm.test("Person is Jane", () => {
  const responseJson = pm.response.json();
  pm.expect(responseJson.name).to.eql("Jane");
  pm.expect(responseJson.age).to.eql(23);
});


---------- Проверка для кода состояния ответа ----------
pm.test("Status code is 201", () => {
  pm.response.to.have.status(201);
});

------- То же самое можно сделать с использованием pm.expect -------
pm.test("Status code is 200", () => {
  pm.expect(pm.response.code).to.eql(200);
});

----- Если вы хотите проверить, что код состояния является одним из множества, 
включите их все в массив и используйте oneOf:
pm.test("Successful POST request", () => {
  pm.expect(pm.response.code).to.be.oneOf([201,202]);
});


----- Проверка текста кода состояния
pm.test("Status code name has string", () => {
  pm.response.to.have.status("Created");
});

----- Тест для проверки, что код состояния НЕ 404 (или какой-либо другой)
pm.test("the endpoint does not return unexpected status code", () => {
  pm.response.to.not.have.status(404);
});



-------------- Проверка наличия заголовка (хэдера) ответа -------------
pm.test("Content-Type header is present", () => {
  pm.response.to.have.header("Content-Type");
});


------ Проверка заголовка ответа, имеющего конкретное значение ------
pm.test("Content-Type header is application/json", () => {
  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');
});


---------- Тестирование куки ----------

--- Проверка наличия cookie в ответе ---
pm.test("Cookie isLoggedIn is present", () => {
  pm.expect(pm.cookies.has('isLoggedIn')).to.be.true;
});

--- Тест (проверка) для конкретного значения cookie ---
pm.test("Cookie isLoggedIn has value 1", () => {
  pm.expect(pm.cookies.get('isLoggedIn')).to.eql('1');
});



----- Тест (проверка), что время ответа находится в заданном диапазоне -----
pm.test("Response time is less than 200ms", () => {
  pm.expect(pm.response.responseTime).to.be.below(200);
});


============= Примеры распространённых проверок ==============
Мы можем проверить, имеет ли свойство ответа то же значение, что и переменная (в этом примере используется переменная среды):
pm.test("Response property matches environment variable", function () {
  pm.expect(pm.response.json().name).to.eql(pm.environment.get("name"));
});


-------- Сверка значения ответа со списком допустимых параметров --------
/* Ответ (Response) имеет следующую структуру:
{
  "type": "Subscriber"
},
*/

pm.test("Value is in valid list", () => {
  pm.expect(pm.response.json().type).to.be.oneOf(["Subscriber", "Customer", "User"]);
});



---------- Проверка типа данных любой части ответа ----------

/* Ответ (Response) имеет следующую структуру:
{
  "name": "Jane",
  "age": 29,
  "hobbies": [
    "skating",
    "painting"
  ],
  "email": null
},
*/
const jsonData = pm.response.json();
pm.test("Test data type of the response", () => {
  pm.expect(jsonData).to.be.an("object");
  pm.expect(jsonData.name).to.be.a("string");
  pm.expect(jsonData.age).to.be.a("number");
  pm.expect(jsonData.hobbies).to.be.an("array");
  pm.expect(jsonData.website).to.be.undefined;
  pm.expect(jsonData.email).to.be.null;
});



------------- Проверка, что ОБЪЕКТ содержит ключи или свойства --------------
/* Ответ (Response) имеет следующую структуру:
{
  "a": 1,
  "b": 2
},
*/
pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
pm.expect({a: 1}).to.have.property('a');
pm.expect({a: 1, b: 2}).to.be.an('object')
  .that.has.all.keys('a', 'b');

Целью может быть объект, набор, массив или карта. Если .keys выполняются без .all или .any, 
значение по умолчанию равно .all;
Поскольку поведение .keys варьируется в зависимости от типа данных цели, рекомендуется проверять тип перед использованием .keys с .a;


--------- Проверка, что ОБЪЕКТ является частью родительского объекта ---------
/* Response has the following structure:
{
  "id": "d8893057-3e91-4cdd-a36f-a0af460b6373",
  "created": true,
  "errors": []
},
*/

pm.test("Object is contained", () => {
  const expectedObject = {
    "created": true,
    "errors": []
  };
  pm.expect(pm.response.json()).to.deep.include(expectedObject);
});


-------- Тест для проверки значения поля в ответе --------
Мы можем подтвердить значение поля, например, поля id и поля name используя тест ниже.

pm.test("API response contains the expected fields", () => {
  const response = pm.response.json();
  
  // строка ниже проверяет, что значение поля id равно 2 (number).
  pm.expect(response).to.have.property("id", 2);

  // строка ниже проверяет, что значение поля name равно "Morty Smith" (string).
  pm.expect(response).to.have.property("name", "Morty Smith");
});


-------- Тест для проверки значения вложенного поля в ответе --------
Вышеприведенный сценарий работает для полей (ключей) в корне ответа.
Что, если мы хотим проверить поле name под корневым (начальным) уровнем? 
Мы можем настроить сценарий для работы с полями на любом уровне.

pm.test("API response contains the expected fields", () => {
  const response = pm.response.json();
  // строка ниже проверяет, что значение поля origin.name равно "Earth (C-137)" (string).
  pm.expect(response).to.have.nested.property("origin.name", "Earth (C-137)");
});



======================= РАБОТА С МАССИВАМИ ======================

---------- Проверка, что значение массива salary БОЛЬШЕ, чем 1-е и 0-е значения этого массива:
--> 1) С помощью above():
pm.test("Check salary[2] is bigger than salary[1]", function () {
    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);

});

pm.test("Check salary[2] is bigger than salary[0]", function () {
    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[0]);
});

--- или можно объединить два выражения в одну проверку:
pm.test("Check salary[2] is bigger", function () {
    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[0]);
    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);
});


--> 2) С помощью greaterThan(): 
pm.test("Check salary[2] is big", function () {
    pm.expect(+jsonData.salary[2]).to.be.greaterThan(+jsonData.salary[0]);
    pm.expect(+jsonData.salary[2]).to.be.greaterThan(+jsonData.salary[1]);
});



--------- Аналогичные выражения для проверки, что значение МЕНЬШЕ другого указанного значения
--> 1) С помощью below():
pm.test("Check salary[0] is smaller than salary[2]", function () {
    pm.expect(+jsonData.salary[0]).to.be.below(+jsonData.salary[0]);
});

--> 2) С помощью lessThan(): 
pm.test("Check salary[2] is big2", function () {
    pm.expect(+jsonData.salary[2]).to.be.lessThan((+jsonData.salary[1]) + (+jsonData.salary[0]) + 1);
});



------------ Проверки массива: содержит ли он определенные элементы ----------
/* Ответ имеет следующую структуру:
{
  "errors": [],
  "areas": [ "goods", "services" ],
  "settings": [
    {
      "type": "notification",
      "detail": [ "email", "sms" ]
    },
    {
      "type": "visual",
      "detail": [ "light", "large" ]
    }
  ]
},
*/

const jsonData = pm.response.json();

pm.test("Test array properties", () => {
    //массив errors является пустым
  pm.expect(jsonData.errors).to.be.empty;
  
    //массив areas включает в себя элемент "goods"
  pm.expect(jsonData.areas).to.include("goods");
  
    //получить объект со значением "notification" в свойстве "type" из массива объектов "settings"
  const notificationSettings = jsonData.settings.find(elem => elem.type === "notification");
	pm.expect(notificationSettings).to.be.an("object", "Could not find the setting");
    
	//массив detail должен включать в себя элемент "sms"
  pm.expect(notificationSettings.detail).to.include("sms");
    
	//массив detail должен включать в себя все элементы из указанного списка
  pm.expect(notificationSettings.detail).to.have.members(["email", "sms"]);
});


---------- Проверка активного окружения в Postman: ----------
pm.test("Check the active environment", () => {
  pm.expect(pm.environment.name).to.eql("Production");
});



------------- Проверка структуры ответа -------------
Вы можете выполнить проверку схемы JSON с помощью tv4
Примечание: Tiny Validator (for v4 JSON Schema), устарел, выдает общий статус проверки.

const schema = {
 "items": {
 "type": "boolean"
 }
};
const data1 = [true, false];
const data2 = [true, 123];

pm.test('Schema is valid', function() {
  pm.expect(tv4.validate(data1, schema)).to.be.true;
  pm.expect(tv4.validate(data2, schema)).to.be.true;
});


------- Также мы можем проверить схему JSON с помощью ajv JSON schema validator -------

const schema = {
  "properties": {
    "alpha": {
      "type": "boolean"
    }
  }
};
pm.test('Schema is valid', function() {
  pm.response.to.have.jsonSchema(schema);
});




================ ОБЛАСТИ ВИДИМОСТИ ПЕРЕМЕННЫХ ================
Postman поддерживает переменные в различных областях, позволяя адаптировать процессы к различным задачам разработки, тестирования и взаимодействия.
Области в Postman относятся к различным контекстам, в которых выполняются ваши запросы, и различные 
области переменных подходят для различных задач.
В порядке от самого широкого до самого узкого эти области:
 global -> collection -> environment -> data -> local.
 
--> ГЛОБАЛЬНЫЕ переменные (Global variables) позволяют получать доступ к данным между коллекциями, запросами, 
тестовыми скриптами и окружениями.
Глобальные переменные доступны внутри рабочего пространства (workspace).
Глобальные - переменные, которые не относятся ни к какому окружению, они доступны во всем рабочем пространстве, из всех окружений. 
Глобальные переменные могут использоваться для передачи данных между коллекциями, запросами и окружениями.
Так как глобальные переменные имеют самую широкую область видимости, доступную в Postman, они хорошо подходят
для тестирования и прототипирования.
На более поздних этапах разработки используйте более конкретные области.

--> Переменные КОЛЛЕКЦИИ (Collection variables) доступны во всех запросах коллекции и не зависят от окружений.
Переменные коллекции не меняются в зависимости от выбранной среды.
Переменные коллекции подходят, если вы используете единственное окружение, 
например, для авторизации или данных URL-а.

--> Переменные ОКРУЖЕНИЯ (Environment variables) позволяют выполнять работу в различных средах, например,
локальная разработка илитестирование или производство (production).
Одно окружение может быть активно в одно время.
Переменные окружения позволяют передавать данные из запроса в запрос внутри этого окружения.
При наличии единой среды использование переменных коллекции может быть более рациональным, 
но окружения (среды) позволяют вам специфически указывать уровни доступа на основе ролей.

--> Переменные ДАННЫХ (Data variables) берутся из внешних файлов CSV и JSON для определения наборов данных, 
которые можно использовать при запуске коллекций в Newman или Collection Runner.
Переменные данных имеют текущие значения, которые не сохраняются (не продолжаются) за пределами выполнения
запроса или прогона коллеции.

Создаем файл с расширением csv или json. Postman поддерживает оба типа файлов, вопрос лишь в формате. 
- В файле csv в первой строке указывается название переменной или нескольких переменных через запятую. 
Далее на отдельных строках следуют значения (или несколько значений через запятую).
- В файле json можно прописать то же самое, но в JSON-формате “ключ-значение”. 
Чтобы добавить переменные в Collection runner, нужно нажать кнопку Select File и загрузить любой из этих файлов.
Collection runner автоматически посчитает количество значений (и соответственно итераций тестов). 
Там же можно посмотреть названия и значения переменных, нажав на кнопку Preview Data.

--> ЛОКАЛЬНЫЕ переменные (Local variables) - это временные переменные, доступ к которым осуществляется в тестовых скриптах запроса.
Локальные значения переменных видимы для одного запроса или прогона (выполнения) коллекции и 
больше не доступны по завершении выполнения.
Локальные переменные подходят, если необходимо значение переменной, чтобы переопределить все другие области
переменных, но они не должны сохраняться после завершения выполнения.





---------- Определение переменных в скриптах ----------
Вы можете устанавливать (программировать) переменные в своих тестовых скриптах запроса (request scripts).
Вот синтаксис скриптов для определения (установки) переменных в различных областях видимости:

--> Для определения глобальной переменной:
pm.globals.set("variable_key", "variable_value");

--> Для определения переменной коллекции.
pm.collectionVariables.set("variable_key", "variable_value");

--> Для определения переменной окружения в текущем выбранном окружении.
pm.environment.set("variable_key", "variable_value");

--> Для определения локальной переменной.
pm.variables.set("variable_key", "variable_value");

--> Для удаления переменной вы можете использовать unset.
pm.environment.unset("variable_key");


--------- Можно тестировать переменные окружения, как в следующем примере:
pm.test("environment to be production", function () {
    pm.expect(pm.environment.get("env")).to.equal("production");
});

Вы можете получить текущее значение переменной в скриптах, используя объект, 
отражающий область (scope) переменной и метод get.

// получить доступ к переменной в любой области, включая локальную
pm.variables.get("variable_key");

// получить доступ к глобальной переменной
pm.globals.get("variable_key");

// получить доступ к переменной коллекции
pm.collectionVariables.get("variable_key");

// получить доступ к переменной окружения
pm.environment.get("variable_key");


